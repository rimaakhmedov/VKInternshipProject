x-airflow-common: &airflow-common
  environment:
    &airflow-common-env
    AIRFLOW_CORE_EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW_CORE_FERNET_KEY: ''
    AIRFLOW__CORE_DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW_CORE_LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5
    _AIRFLOW_DB_MIGRATE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
    _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./input:/opt/airflow/input
    - ./output:/opt/airflow/output
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - all_in_one

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    networks:
      - all_in_one


  af-webserver:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: af-webserver
    environment:
      *airflow-common-env
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  af-scheduler:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: af-scheduler
    environment:
      *airflow-common-env
    command: scheduler
    restart: always

  af-worker:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: af-worker
    environment:
      *airflow-common-env
    command: version
    restart: always

  airflow-init:
    <<: *airflow-common
    build:
      context: ./airflow_dockerfile
      dockerfile: Dockerfile
    container_name: airflow-init
    command: version
    environment:
      <<: *airflow-common-env


volumes:
  postgres-db-volume:

networks:
  all_in_one: